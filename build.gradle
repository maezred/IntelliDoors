buildscript {
    ext.kotlin_version = '1.1.2'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath 'org.ajoberstar:gradle-git:1.7.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'com.github.johnrengelman.shadow'

def date = new Date()
def lastCommit = grgit.log(maxCommits: 1).get(0)

ext {
    artifactId = project.name.toLowerCase()
    author = lastCommit.author
    buildDateTime = date.format('YYYY/MM/dd HH:mm:ss zzz')
    buildDate = date.format('YYYY/MM/dd')
    buildTime = date.format('HH:mm:ss')
    copyright = 2011 // Hardcoded for now.
    isDirty = "${project.version}".contains('uncommitted')
    isRelease = !"${project.version}".contains('-')
    isSnapshot = "${project.version}".contains('dev')
    website = "https://github.com/moltendorf/${project.name}"
    year = date.format('YYYY')
}

description = 'Smarter doors for your Minecraft world!'
group = 'net.moltendorf.bukkit'

sourceCompatibility = 1.8

task copySources(type: Copy) {
    outputs.upToDateWhen { false }

    from "$projectDir/src"
    into "$buildDir/resources/main/src"
}

task deleteSources(type: Copy) {
    outputs.upToDateWhen { false }

    delete "$buildDir/resources/main/src"
}

task copyMeta(type: Copy) {
    outputs.upToDateWhen { false }

    from "$projectDir/src/main/templates"

    include 'LICENSE'
    include 'README.md'

    expand project: project

    into projectDir
}

task publishLatestArtifact(type: Copy) {
    outputs.upToDateWhen { false }

    from "$buildDir/libs"

    include "${project.name}-${project.version}.jar"
    rename { "${project.ext.artifactId}.jar" }

    if (project.ext.isRelease) {
        into "$projectDir/out/nexus/latest/release"
    } else {
        into "$projectDir/out/nexus/latest/snapshot"
    }
}

tasks.build.mustRunAfter 'clean'
tasks.copySources.mustRunAfter 'clean'
tasks.processResources.mustRunAfter 'copySources'
tasks.shadowJar.mustRunAfter 'jar'

tasks.assemble.dependsOn 'shadowJar'
tasks.copySources.dependsOn 'deleteSources'
tasks.publishLatestArtifact.dependsOn 'build', 'clean'
tasks.publish.dependsOn 'publishLatestArtifact'
tasks.release.dependsOn 'publish'

if (project.ext.isRelease) {
    tasks.release.dependsOn 'copyMeta'
}

if (project.ext.isDirty) {
    tasks.publish.dependsOn 'copySources'
}

jar {
    manifest.attributes 'Specification-Title': project.name,
            'Specification-Vendor': "${project.ext.author.name} <${project.ext.author.email}>",
            'Implementation-Title': "${project.group}.${project.ext.artifactId}.${project.name}",
            'Implementation-Version': project.version
}

shadowJar {
    baseName = project.name
    version = project.version
    classifier = null

    from("$projectDir/src/main/templates") {
        include 'LICENSE'
        include 'README.md'

        expand project: project

        into 'META-INF'
    }

    from("$projectDir/src/main/templates") {
        exclude 'LICENSE'
        exclude 'README.md'

        expand project: project
    }
}

publishing {
    publications {
        shadow(MavenPublication) {
            groupId = project.group
            artifactId = project.ext.artifactId

            from components.shadow
        }
    }

    repositories {
        maven {
            if (project.ext.isRelease) {
                url "file://$projectDir/out/nexus/releases"
            } else {
                url "file://$projectDir/out/nexus/snapshots"
            }
        }
    }
}

repositories {
    mavenCentral()

    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://hub.spigotmc.org/nexus/content/groups/public' }
    maven { url 'https://fab.moltendorf.net/nexus/releases' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlin_version}"

    compile 'org.spigotmc:spigot-api:1.9+'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

configurations {
    runtime.exclude module: 'spigot-api'
}
